"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π DOM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞

–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç DOM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ —Å—Ç–∏–ª–µ browser-use
–¥–ª—è –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏.
"""

import argparse
import asyncio
import base64
import json
import os
import re
import sys
import time
import uuid
from datetime import datetime
from typing import Any, Dict, List, Optional, Tuple

# MCP client
from mcp import ClientSession, StdioServerParameters  # type: ignore
from mcp.client.stdio import stdio_client  # type: ignore


RUNS_DIR = os.path.join(os.path.dirname(__file__), "agent_runs")
DOCS_DIR = os.path.join(os.path.dirname(__file__), "docs")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
ITEMS_LIMIT = 120  # –ï–¥–∏–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –≤—Å–µ—Ö –≤—ã–∑–æ–≤–æ–≤ –Ω—É–º–µ—Ä–∞—Ü–∏–∏


def _now_iso() -> str:
  # timezone-aware would be better, but keep consistent with mbp0
  return datetime.utcnow().isoformat() + "Z"


def _ensure_dir(path: str) -> None:
  os.makedirs(path, exist_ok=True)


def write_event(run_dir: str, event: Dict[str, Any]) -> None:
  _ensure_dir(run_dir)
  events_path = os.path.join(run_dir, "steps.jsonl")
  with open(events_path, "a", encoding="utf-8") as f:
    f.write(json.dumps(event, ensure_ascii=False) + "\n")


def write_meta(run_dir: str, meta: Dict[str, Any]) -> None:
  _ensure_dir(run_dir)
  meta_path = os.path.join(run_dir, "meta.json")
  with open(meta_path, "w", encoding="utf-8") as f:
    json.dump(meta, f, ensure_ascii=False, indent=2)


def write_text(run_dir: str, filename: str, content: str) -> str:
  _ensure_dir(run_dir)
  path = os.path.join(run_dir, filename)
  with open(path, "w", encoding="utf-8") as f:
    f.write(content)
  return path


def load_system_prompt() -> str:
  path = os.path.join(DOCS_DIR, "SYSTEM_PROMPT_–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.md")
  if not os.path.exists(path):
    return ""
  with open(path, "r", encoding="utf-8") as f:
    return f.read()


def try_import_gemini():
  try:
    from google import genai  # type: ignore
    return genai
  except Exception:
    return None


def build_llm_input(goal: str, step_summary: str, system_prompt: str) -> str:
  # Keep it simple: concatenate with clear delimiters
  parts = [
    "SYSTEM:\n" + system_prompt.strip(),
    "GOAL:\n" + goal.strip(),
  ]
  
  # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
  if step_summary:
    parts.append("CONTEXT (last steps/results):\n" + step_summary.strip())
  
  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∞–Ω–∞–ª–∏–∑—É
  parts.append(
    "ANALYSIS INSTRUCTIONS:\n"
    "1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É - —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ?\n"
    "2. –û—Ü–µ–Ω–∏–≤–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å - —á—Ç–æ —É–∂–µ —Å–¥–µ–ª–∞–Ω–æ?\n"
    "3. –ü–ª–∞–Ω–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?\n"
    "4. –ò–∑–±–µ–≥–∞–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π - –Ω–µ –¥–µ–ª–∞–π –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ!\n"
  )
  
  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π DOM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
  parts.append(
    "OUTPUT INSTRUCTIONS:\n"
    "–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –ë–ï–ó markdown —Ä–∞–∑–º–µ—Ç–∫–∏:\n"
    "{\n"
    '  "mode": "act",\n'
    '  "tool": "browser_get_state",\n'
    '  "args": {},\n'
    '  "rationale": "–ü–æ–ª—É—á–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"\n'
    "}\n"
    "\n"
    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:\n"
    "üì± DOM Analyzer (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ):\n"
    "  - browser_get_state: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏\n"
    "  - browser_click: –∫–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –ø–æ –∏–Ω–¥–µ–∫—Å—É\n"
    "  - browser_type: –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É\n"
    "  - browser_navigate_dom: –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ URL\n"
    "  - browser_extract_content: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
    "  - browser_scroll: –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã\n"
    "  - browser_go_back: –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞–∑–∞–¥\n"
    "  - browser_list_tabs: —Å–ø–∏—Å–æ–∫ –≤–∫–ª–∞–¥–æ–∫\n"
    "\n"
    "üîÑ Legacy (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏):\n"
    "  - browser_navigate: –Ω–∞–≤–∏–≥–∞—Ü–∏—è —á–µ—Ä–µ–∑ Playwright\n"
    "  - files_search: –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤\n"
    "  - files_read_text: —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤\n"
    "\n"
    "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å:\n"
    "1. browser_get_state - –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã\n"
    "2. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º\n"
    "3. browser_click/browser_type —Å –Ω—É–∂–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏\n"
    "4. –ü–æ–≤—Ç–æ—Ä—è—Ç—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã\n"
  )
  
  return "\n\n".join(parts)


def summarize_steps_for_llm(history: List[Dict[str, Any]]) -> str:
  """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —à–∞–≥–æ–≤ –¥–ª—è LLM"""
  if not history:
    return ""
  
  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —à–∞–≥–æ–≤
  recent_steps = history[-5:]
  
  summary_parts = []
  for step in recent_steps:
    if step.get("type") == "tool_call":
      tool_name = step.get("tool_name", "unknown")
      success = step.get("success", False)
      if success:
        summary_parts.append(f"‚úÖ {tool_name}: —É—Å–ø–µ—à–Ω–æ")
      else:
        error = step.get("error", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        summary_parts.append(f"‚ùå {tool_name}: {error}")
    elif step.get("type") == "page_state":
      elements_count = step.get("interactive_elements", 0)
      summary_parts.append(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {elements_count} –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
  
  return "\n".join(summary_parts)


def parse_llm_output(text: str) -> Tuple[str, Dict[str, Any]]:
  """–ü–∞—Ä—Å–∏—Ç –≤—ã–≤–æ–¥ LLM –≤ —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
  try:
    # –ò—â–µ–º JSON –≤ —Ç–µ–∫—Å—Ç–µ - –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫
    json_match = re.search(r'\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\}', text, re.DOTALL)
    if not json_match:
      raise ValueError("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
    
    json_str = json_match.group(0)
    data = json.loads(json_str)
    
    mode = data.get("mode", "act")
    tool = data.get("tool", "") or data.get("name", "")  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö –ø–æ–ª–µ–π
    args = data.get("args", {}) or {}
    rationale = data.get("rationale", "")
    
    if not tool:
      raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")
    
    return rationale, {"name": tool, "arguments": args}
    
  except Exception as e:
    raise ValueError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ LLM: {e}")


def normalize_tool_name(name: str) -> str:
  """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏–º–µ–Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π DOM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
  # Map dotted names to server snake_case
  mapping = {
    # DOM Analyzer –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–æ—Å–Ω–æ–≤–Ω—ã–µ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ)
    "browser.get_state": "browser_get_state",
    "browser.click": "browser_click",
    "browser.type": "browser_type",
    "browser.navigate_dom": "browser_navigate_dom",
    "browser.extract_content": "browser_extract_content",
    "browser.scroll": "browser_scroll",
    "browser.go_back": "browser_go_back",
    "browser.list_tabs": "browser_list_tabs",
    "dom_analyzer.status": "dom_analyzer_status",
    
    # Legacy –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    "browser.navigate": "browser_navigate",
    "browser.click_by_text": "browser_click_by_text",
    "browser.type_by_text": "browser_type_by_text",
    "browser.click_selector": "browser_click_selector",
    "browser.type_selector": "browser_type_selector",
    "browser.back": "browser_back",
    "browser.forward": "browser_forward",
    "browser.reload": "browser_reload",
    "browser.open_in_new_tab": "browser_open_in_new_tab",
    "browser.switch_tab": "browser_switch_tab",
    "browser.find": "browser_find",
    "browser.press": "browser_press",
    "browser.extract": "browser_extract_universal",
    "browser.screenshot": "browser_screenshot",
    "browser.click_and_wait_download": "browser_click_and_wait_download",
    "browser.download_wait": "browser_download_wait",
    "browser.upload": "browser_upload",
    "browser.close_banners": "browser_close_banners",
    
    # –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç
    "assistant_done": "assistant_done",
    "assistant_ask": "assistant_ask",
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    "browser.check_page_state": "browser_check_page_state",
    "browser.human_click_text": "browser_human_click_text",
    "browser.smart_click_text": "browser_smart_click_text",
    "browser.detect_anti_bot": "browser_detect_anti_bot",
    "browser.click_text_with_diagnostics": "browser_click_text_with_diagnostics",
    "browser.click_coordinates": "browser_click_coordinates",
    "browser.get_element_coordinates": "browser_get_element_coordinates",
    
    # –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    "files.search": "files_search",
    "files.read_text": "files_read_text",
  }
  return mapping.get(name, name)


def is_post_hook_trigger(logical_name: str) -> bool:
  """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å post-hook –ø–æ—Å–ª–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
  return logical_name in (
    "browser_navigate",
    "browser_navigate_dom",  # –î–æ–±–∞–≤–ª–µ–Ω DOM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    "browser_reload", 
    "browser_open_in_new_tab",
    "browser_switch_tab",
    "browser_overlay_act",
  )


def is_new_page_trigger(name: str) -> bool:
  """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å overlay –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
  # Fire numeric overlay auto-show after navigation/tab changes
  triggers = {
    "browser_navigate",
    "browser_navigate_dom",  # –î–æ–±–∞–≤–ª–µ–Ω DOM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    "browser_reload",
    "browser_open_in_new_tab",
    "browser_switch_tab",
    "browser_back",
    "browser_forward",
  }
  result = name in triggers
  print(f"üîç DEBUG: is_new_page_trigger({name}) = {result}, —Ç—Ä–∏–≥–≥–µ—Ä—ã: {triggers}")
  return result


def is_dom_analyzer_tool(tool_name: str) -> bool:
  """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç DOM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º"""
  dom_tools = {
    "browser_get_state",
    "browser_click",
    "browser_type",
    "browser_navigate_dom",
    "browser_extract_content",
    "browser_scroll",
    "browser_go_back",
    "browser_list_tabs",
    "dom_analyzer_status"
  }
  return tool_name in dom_tools


async def run_c6_loop(goal: str, max_steps: int, model_name: str, run_dir: str) -> None:
  """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π DOM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
  system_prompt = load_system_prompt()
  genai = try_import_gemini()
  if genai is None:
    print("google-genai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install google-genai", file=sys.stderr)
    return

  api_key = os.environ.get("GEMINI_API_KEY") or os.environ.get("GOOGLE_API_KEY")
  if not api_key:
    print("–ù–µ –Ω–∞–π–¥–µ–Ω GEMINI_API_KEY/GOOGLE_API_KEY –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.", file=sys.stderr)
    return

  # DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
  print(f"üîç DEBUG: API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω, –¥–ª–∏–Ω–∞: {len(api_key)} —Å–∏–º–≤–æ–ª–æ–≤")
  print(f"üîç DEBUG: –ü–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤: {api_key[:10]}...")
  print(f"üîç DEBUG: –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–º–≤–æ–ª–æ–≤: ...{api_key[-10:]}")
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞
  if not api_key.startswith("AIza"):
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: API –∫–ª—é—á –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'AIza' - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

  client = genai.Client(api_key=api_key)
  print(f"üîç DEBUG: Gemini –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {type(client)}")

  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π MCP —Å–µ—Ä–≤–µ—Ä —Å DOM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º
  # –ó–∞–ø—É—Å–∫–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä
  server_params = StdioServerParameters(
      command="python3", 
      args=["mcp_server_dom_analyzer.py", "--stdio"]
  )
  print(f"üîç DEBUG: MCP —Å–µ—Ä–≤–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {server_params}")
  print("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π MCP —Å–µ—Ä–≤–µ—Ä —Å DOM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º")
  
  async with stdio_client(server_params) as (read, write):
    print("üîç DEBUG: MCP –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
    async with ClientSession(read, write) as session:
      print("üîç DEBUG: MCP —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞")
      await session.initialize()
      print("üîç DEBUG: MCP —Å–µ—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

      last_close_ts = 0.0
      last_llm_ts = 0.0
      last_screenshot_path: Optional[str] = None
      history: List[Dict[str, Any]] = []
      
      # –°–æ—Å—Ç–æ—è–Ω–∏–µ DOM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
      current_page_state: Optional[Dict[str, Any]] = None
      last_state_update: float = 0.0

      # Feature flags and thresholds (simplified)
      not_found_retries = int(os.environ.get("NOT_FOUND_RETRIES", "2") or "2")
      fallback_on_not_found = os.environ.get("FALLBACK_ON_NOT_FOUND", "1") not in {"0", "false", "False"}

      error_counters: Dict[str, int] = {}

      for step_idx in range(1, max_steps + 1):
        # Build prompt (simplified - no items analysis)
        step_summary = summarize_steps_for_llm(history)
        llm_input = build_llm_input(goal, step_summary, system_prompt)

        write_event(run_dir, {"ts": _now_iso(), "type": "llm_request", "step": step_idx, "input_len": len(llm_input)})
        try:
          pth = write_text(run_dir, f"llm_input_step_{step_idx}.txt", llm_input)
          write_event(run_dir, {"ts": _now_iso(), "type": "llm_input_saved", "step": step_idx, "path": pth})
        except Exception:
          pass

        # Throttle LLM calls to avoid 429 - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        try:
          delta = time.monotonic() - last_llm_ts
          if delta < 2.0:  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 7.0 –¥–æ 2.0 —Å–µ–∫—É–Ω–¥
            wait_s = round(2.0 - delta, 2)
            write_event(run_dir, {"ts": _now_iso(), "type": "llm_throttle_wait", "step": step_idx, "seconds": wait_s})
            time.sleep(wait_s)
        except Exception:
          pass

        # Call Gemini with retry/backoff on 429
        out_text = ""
        llm_error: Optional[str] = None
        
        # DEBUG: Log the prompt being sent to LLM
        print(f"\nüîç DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è—é LLM –ø—Ä–æ–º–ø—Ç –¥–ª–∏–Ω–æ–π {len(llm_input)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üîç DEBUG: –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ–º–ø—Ç–∞: {llm_input[:200]}...")
        
        for attempt in range(0, 3):
          try:
            parts: List[Dict[str, Any]] = [{"text": llm_input}]
            try:
              if last_screenshot_path and os.path.exists(last_screenshot_path):
                with open(last_screenshot_path, "rb") as img_f:
                  img_b64 = base64.b64encode(img_f.read()).decode("ascii")
                parts.append({"inline_data": {"mime_type": "image/png", "data": img_b64}})
            except Exception as _:
              pass
            
            print(f"üîç DEBUG: –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3 - –≤—ã–∑—ã–≤–∞—é Gemini API...")
            resp = client.models.generate_content(model=model_name, contents=[{"role": "user", "parts": parts}])
            
            # DEBUG: Log raw response
            print(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini, —Ç–∏–ø: {type(resp)}")
            print(f"üîç DEBUG: –ê—Ç—Ä–∏–±—É—Ç—ã –æ—Ç–≤–µ—Ç–∞: {dir(resp)}")
            
            out_text = getattr(resp, "text", None) or ""
            print(f"üîç DEBUG: resp.text = {repr(out_text)}")
            
            if not out_text:
              try:
                candidates = getattr(resp, "candidates", [])
                print(f"üîç DEBUG: –ö–∞–Ω–¥–∏–¥–∞—Ç—ã: {len(candidates)}")
                for i, c in enumerate(candidates):
                  print(f"üîç DEBUG: –ö–∞–Ω–¥–∏–¥–∞—Ç {i}: {dir(c)}")
                  candidate_text = getattr(c, "text", None)
                  print(f"üîç DEBUG: –ö–∞–Ω–¥–∏–¥–∞—Ç {i} —Ç–µ–∫—Å—Ç: {repr(candidate_text)}")
                out_text = "\n".join([c.text for c in candidates if getattr(c, "text", None)])
                print(f"üîç DEBUG: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {repr(out_text)}")
              except Exception as e:
                print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {e}")
                out_text = ""
            
            print(f"üîç DEBUG: –§–∏–Ω–∞–ª—å–Ω—ã–π out_text: {repr(out_text)}")
            
            llm_error = None
            last_llm_ts = time.monotonic()
            break
          except Exception as e:
            err_str = str(e)
            llm_error = err_str
            print(f"üîç DEBUG: –û—à–∏–±–∫–∞ Gemini API (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {err_str}")
            # Detect quota/429
            if "RESOURCE_EXHAUSTED" in err_str or "429" in err_str:
              # Try to parse retryDelay like "retryDelay': '57s'"
              m = re.search(r"retryDelay[^\d]*(\d+)s", err_str)
              if m:
                wait_s = max(5, int(m.group(1)))
              else:
                wait_s = 8 + 4 * attempt
              write_event(run_dir, {"ts": _now_iso(), "type": "llm_retry", "step": step_idx, "attempt": attempt + 1, "wait_s": wait_s, "error": err_str})
              print(f"üîç DEBUG: –û–∂–∏–¥–∞–Ω–∏–µ {wait_s} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
              time.sleep(wait_s)
              continue
            else:
              write_event(run_dir, {"ts": _now_iso(), "type": "llm_error", "step": step_idx, "error": err_str})
              break
        if llm_error and not out_text:
          # Give up this run on persistent LLM error
          print(f"üîç DEBUG: –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –æ—à–∏–±–∫–∞: {llm_error}")
          break

        write_event(run_dir, {"ts": _now_iso(), "type": "llm_response", "step": step_idx, "text": out_text})
        
        # DEBUG: Log what we got from LLM
        print(f"üîç DEBUG: LLM –æ—Ç–≤–µ—Ç–∏–ª: {repr(out_text)}")
        if not out_text or out_text.strip() == "":
          print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: LLM –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç!")
          print("üö® –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
          print("üö® 1. –ü—Ä–æ–±–ª–µ–º–∞ —Å Gemini API –∫–ª—é—á–æ–º")
          print("üö® 2. –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–º–ø—Ç–æ–º (—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π/—Å–ª–æ–∂–Ω—ã–π)")
          print("üö® 3. –ü—Ä–æ–±–ª–µ–º–∞ —Å –º–æ–¥–µ–ª—å—é Gemini")
          print("üö® 4. –°–µ—Ç–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
          
          # FALLBACK: –ü—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ LLM
          print("üîÑ –ê–∫—Ç–∏–≤–∏—Ä—É—é fallback —Ä–µ–∂–∏–º...")
          if "amazon" in goal.lower():
            fallback_tool = "browser_navigate"
            fallback_args = {"url": "https://amazon.com"}
            fallback_rationale = "–û—Ç–∫—Ä—ã–≤–∞—é Amazon (fallback —Ä–µ–∂–∏–º)"
            print(f"üîÑ Fallback: {fallback_tool} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ {fallback_args}")
            return fallback_rationale, {"name": fallback_tool, "arguments": fallback_args}
          elif "google" in goal.lower():
            fallback_tool = "browser_navigate"
            fallback_args = {"url": "https://google.com"}
            fallback_rationale = "–û—Ç–∫—Ä—ã–≤–∞—é Google (fallback —Ä–µ–∂–∏–º)"
            print(f"üîÑ Fallback: {fallback_tool} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ {fallback_args}")
            return fallback_rationale, {"name": fallback_tool, "arguments": fallback_args}
          else:
            print("üîÑ Fallback: –ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–∞–π—Ç, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É")
            break

        # Parse
        try:
          progress, fcall = parse_llm_output(out_text or "")
        except Exception as e:
          excerpt = (out_text or "")[:500]
          write_event(run_dir, {"ts": _now_iso(), "type": "parse_error", "step": step_idx, "error": str(e), "response_excerpt": excerpt})
          
          # Simple fallback: ask LLM to retry with correct format
          print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ LLM: {e}")
          print("LLM –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –ø–æ–ª–µ–º 'mode'")
          print("–ü–æ–≤—Ç–æ—Ä—è—é –∑–∞–ø—Ä–æ—Å...")
          
          # Wait before retry
          time.sleep(2.0)
          continue

        logical_name = fcall.get("name", "")
        args = fcall.get("arguments", {}) or {}

        write_event(run_dir, {"ts": _now_iso(), "type": "tool_mapping", "logical": logical_name, "mapped": normalize_tool_name(logical_name)})

        # Handle assistant_ask/done locally
        if logical_name == "assistant_done":
          write_event(run_dir, {"ts": _now_iso(), "type": "assistant_done", "reason": args.get("reason", ""), "step": step_idx, "progress": progress})
          break
        if logical_name == "assistant_ask":
          question = str(args.get("question", ""))
          write_event(run_dir, {"ts": _now_iso(), "type": "assistant_ask", "question": question, "step": step_idx, "progress": progress})
          print("–í–æ–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:", question)
          print("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ Enter:", flush=True)
          user_answer = sys.stdin.readline().strip()
          # Feed answer back into history context
          history.append({"type": "user_answer", "text": user_answer})
          # Pause between iterations
          time.sleep(4.0)
          continue

        mapped = normalize_tool_name(logical_name)

        # –ê–≤—Ç–æ-–ø–æ–¥–º–µ–Ω–∞ –æ–±—ã—á–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –Ω–∞ —É–º–Ω—ã–π –∫–ª–∏–∫ —Å anti-bot –æ–±—Ö–æ–¥–æ–º
        if mapped == "browser_click_text":
          try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
            recommended_tool = "browser_smart_click_text"
            mapped = recommended_tool or "browser_smart_click_text"
          except Exception:
            mapped = "browser_smart_click_text"

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        print(f"üîß –í—ã–ø–æ–ª–Ω—è—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {mapped} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {args}")
        
        try:
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è DOM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
          if is_dom_analyzer_tool(mapped) and (current_page_state is None or time.monotonic() - last_state_update > 30.0):
            print("üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è DOM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
            try:
              state_result = await asyncio.wait_for(
                session.call_tool("browser_get_state", arguments={}),
                timeout=10.0
              )
              if state_result and state_result.get("success"):
                current_page_state = state_result
                last_state_update = time.monotonic()
                print(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {state_result.get('interactive_elements', 0)} –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                history.append({
                  "type": "page_state",
                  "timestamp": last_state_update,
                  "interactive_elements": state_result.get('interactive_elements', 0),
                  "total_elements": state_result.get('total_elements', 0),
                  "url": state_result.get('url', ''),
                  "title": state_result.get('title', '')
                })
              else:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {state_result}")
            except Exception as e:
              print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")

          # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
          result = await asyncio.wait_for(
            session.call_tool(mapped, arguments=args),
            timeout=15.0
          )
          
          # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º CallToolResult –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          if hasattr(result, 'content'):
            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç MCP
            result_dict = result.content[0].text if result.content else {}
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞
                import json
                result_dict = json.loads(result_dict) if isinstance(result_dict, str) else result_dict
            except:
                result_dict = {"success": True, "message": str(result_dict)}
          else:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
            result_dict = result if isinstance(result, dict) else {"success": True, "message": str(result)}
          
          success = result_dict.get("success", True)
          error_msg = result_dict.get("error", "") if not success else ""
          
          # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          write_event(run_dir, {
            "ts": _now_iso(),
            "type": "tool_call",
            "step": step_idx,
            "tool_name": mapped,
            "arguments": args,
            "success": success,
            "error": error_msg,
            "result": result_dict
          })
          
          if success:
            print(f"‚úÖ {mapped} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ï—Å–ª–∏ —ç—Ç–æ DOM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if is_dom_analyzer_tool(mapped) and mapped != "browser_get_state":
              print("üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è DOM –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞...")
              try:
                state_result = await asyncio.wait_for(
                  session.call_tool("browser_get_state", arguments={}),
                  timeout=10.0
                )
                if state_result and state_result.get("success"):
                  current_page_state = state_result
                  last_state_update = time.monotonic()
                  print(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {state_result.get('interactive_elements', 0)} –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
              except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
          else:
            print(f"‚ùå {mapped} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {error_msg}")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            error_counters[mapped] = error_counters.get(mapped, 0) + 1
            
            # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ —Å –æ–¥–Ω–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
            if error_counters[mapped] >= 3:
              print(f"‚ö†Ô∏è –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ —Å {mapped}, –ø—Ä–µ–¥–ª–∞–≥–∞—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É...")
              if mapped == "browser_click" and current_page_state:
                print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ browser_get_state –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
              elif mapped == "browser_type" and current_page_state:
                print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ browser_get_state –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
          
          # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
          history.append({
            "type": "tool_call",
            "tool_name": mapped,
            "arguments": args,
            "success": success,
            "error": error_msg,
            "timestamp": time.monotonic()
          })
          
        except asyncio.TimeoutError:
          error_msg = "Timeout –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"
          print(f"‚è∞ {mapped} –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç")
          
          write_event(run_dir, {
            "ts": _now_iso(),
            "type": "tool_timeout",
            "step": step_idx,
            "tool_name": mapped,
            "arguments": args,
            "error": error_msg
          })
          
          # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
          history.append({
            "type": "tool_timeout",
            "tool_name": mapped,
            "arguments": args,
            "error": error_msg,
            "timestamp": time.monotonic()
          })
          
        except Exception as e:
          error_msg = str(e)
          print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {mapped}: {error_msg}")
          
          write_event(run_dir, {
            "ts": _now_iso(),
            "type": "tool_error",
            "step": step_idx,
            "tool_name": mapped,
            "arguments": args,
            "error": error_msg
          })
          
          # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
          history.append({
            "type": "tool_error",
            "tool_name": mapped,
            "arguments": args,
            "error": error_msg,
            "timestamp": time.monotonic()
          })

        # Post-hook –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if is_post_hook_trigger(mapped):
          print(f"üîÑ –í—ã–ø–æ–ª–Ω—è—é post-hook –¥–ª—è {mapped}...")
          
          # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          await asyncio.sleep(2.0)
          
          # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          try:
            cb_args = {"time_budget_ms": 2000, "max_passes": 2, "strategy": "safe"}
            _ = await asyncio.wait_for(session.call_tool("browser_close_banners", arguments=cb_args), timeout=6.0)
            print("‚úÖ –ë–∞–Ω–Ω–µ—Ä—ã –∑–∞–∫—Ä—ã—Ç—ã")
          except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –±–∞–Ω–Ω–µ—Ä—ã: {e}")
          
          # –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          try:
            _ = await asyncio.wait_for(session.call_tool("browser_wait", arguments={"ms": 1000}), timeout=8.0)
          except Exception:
            pass

        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
        await asyncio.sleep(1.0)

      print(f"üéØ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ—Å–ª–µ {step_idx} —à–∞–≥–æ–≤")


def main():
  """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
  parser = argparse.ArgumentParser(description="Orchestrator MBP1 —Å DOM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º")
  parser.add_argument("goal", help="–¶–µ–ª—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
  parser.add_argument("--max-steps", type=int, default=50, help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤")
  parser.add_argument("--model", default="gemini-2.5-flash-lite", help="–ú–æ–¥–µ–ª—å Gemini –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
  parser.add_argument("--run-dir", help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
  
  args = parser.parse_args()
  
  # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞
  if not args.run_dir:
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    args.run_dir = os.path.join(RUNS_DIR, f"run_{timestamp}")
  
  print(f"üöÄ –ó–∞–ø—É—Å–∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å DOM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º")
  print(f"üéØ –¶–µ–ª—å: {args.goal}")
  print(f"üîß –ú–æ–¥–µ–ª—å: {args.model}")
  print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {args.run_dir}")
  print(f"üì± DOM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä: –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
  print(f"üîÑ Legacy –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è")
  
  # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
  asyncio.run(run_c6_loop(args.goal, args.max_steps, args.model, args.run_dir))


if __name__ == "__main__":
  main()
