"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π MCP —Å–µ—Ä–≤–µ—Ä —Å DOM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º

–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –Ω–æ–≤—ã–º–∏ DOM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
–≤ —Å—Ç–∏–ª–µ browser-use –¥–ª—è –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏.
"""

from typing import Dict, List, Any, Optional, TYPE_CHECKING
import os
import tempfile
import asyncio
import time
import json
from urllib.parse import urlparse

from mcp.server.fastmcp import FastMCP
try:
    import yaml  # type: ignore
except Exception:  # pragma: no cover
    yaml = None  # type: ignore

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–∑–∞–≥–ª—É—à–∫–∏)
# from tools.browser_stub import navigate as stub_navigate, close_banners as stub_close_banners, extract_summary as stub_extract_summary
# from tools.files_stub import search_files as stub_search_files, read_text_file as stub_read_text

# –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
async def stub_navigate(url: str) -> Dict[str, Any]:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è navigate"""
    return {"status": "stub", "message": f"Navigate to {url} (stub)", "url": url}

async def stub_close_banners() -> Dict[str, Any]:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è close_banners"""
    return {"status": "stub", "message": "Close banners (stub)"}

async def stub_extract_summary() -> Dict[str, Any]:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è extract_summary"""
    return {"status": "stub", "message": "Extract summary (stub)"}

async def stub_search_files(query: str) -> Dict[str, Any]:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è search_files"""
    return {"status": "stub", "message": f"Search files: {query} (stub)"}

async def stub_read_text(path: str) -> Dict[str, Any]:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è read_text"""
    return {"status": "stub", "message": f"Read text: {path} (stub)", "content": ""}

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ DOM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
from dom_analyzer.mcp_tools import MCPDOMTools

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ Chrome —Å CDP
import subprocess
import platform
import signal
import atexit

def _start_chrome_with_cdp():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç Chrome —Å CDP –ø–æ—Ä—Ç–æ–º 9222"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ Chrome —Å CDP
        import socket
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex(('localhost', 9222))
        sock.close()
        
        if result == 0:
            print("‚úÖ Chrome —É–∂–µ –∑–∞–ø—É—â–µ–Ω —Å CDP –Ω–∞ –ø–æ—Ä—Ç—É 9222")
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞ Chrome –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
        if platform.system() == "Darwin":  # macOS
            chrome_cmd = [
                "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",
                "--remote-debugging-port=9222",
                "--user-data-dir=/tmp/chrome-debug",
                "--no-first-run",
                "--no-default-browser-check"
            ]
        elif platform.system() == "Linux":
            chrome_cmd = [
                "google-chrome",
                "--remote-debugging-port=9222",
                "--user-data-dir=/tmp/chrome-debug",
                "--no-first-run",
                "--no-default-browser-check"
            ]
        elif platform.system() == "Windows":
            chrome_cmd = [
                "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",
                "--remote-debugging-port=9222",
                "--user-data-dir=C:\\temp\\chrome-debug",
                "--no-first-run",
                "--no-default-browser-check"
            ]
        else:
            print("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–° –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ Chrome")
            return None
        
        print("üöÄ –ó–∞–ø—É—Å–∫–∞—é Chrome —Å CDP –Ω–∞ –ø–æ—Ä—Ç—É 9222...")
        chrome_process = subprocess.Popen(
            chrome_cmd,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
            start_new_session=True
        )
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Chrome
        time.sleep(3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã–ª—Å—è
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex(('localhost', 9222))
        sock.close()
        
        if result == 0:
            print("‚úÖ Chrome —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —Å CDP –Ω–∞ –ø–æ—Ä—Ç—É 9222")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
            def cleanup_chrome():
                try:
                    chrome_process.terminate()
                    chrome_process.wait(timeout=5)
                    print("üîå Chrome —Å CDP –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except:
                    chrome_process.kill()
            
            atexit.register(cleanup_chrome)
            
            return chrome_process
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Chrome —Å CDP")
            chrome_process.terminate()
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Chrome —Å CDP: {e}")
        return None

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º Chrome –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
_chrome_process = _start_chrome_with_cdp()

# –°–æ–∑–¥–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä
mcp = FastMCP(name="Blind Assistant Core with DOM Analyzer")

def _check_chrome_cdp_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Chrome —Å CDP"""
    try:
        import socket
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex(('localhost', 9222))
        sock.close()
        
        if result == 0:
            return {
                "status": "running",
                "port": 9222,
                "message": "Chrome –∑–∞–ø—É—â–µ–Ω —Å CDP –Ω–∞ –ø–æ—Ä—Ç—É 9222"
            }
        else:
            return {
                "status": "not_running",
                "port": 9222,
                "message": "Chrome –Ω–µ –∑–∞–ø—É—â–µ–Ω —Å CDP"
            }
    except Exception as e:
        return {
            "status": "error",
            "port": 9222,
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}"
        }

@mcp.tool()
async def chrome_cdp_status() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Chrome —Å CDP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º."""
    return _check_chrome_cdp_status()

# Playwright (async API)
try:
    from playwright.async_api import async_playwright
except Exception:  # pragma: no cover
    async_playwright = None  # type: ignore

if TYPE_CHECKING:  # precise types for type checkers only
    from playwright.async_api import Playwright as PW, Browser, Page, Frame
else:  # at runtime, avoid hard dependency in annotations
    PW = Any  # type: ignore
    Browser = Any  # type: ignore
    Page = Any  # type: ignore
    Frame = Any  # type: ignore


class _BrowserSession:
    _pw: Optional["PW"] = None
    _browser: Optional["Browser"] = None
    _page: Optional["Page"] = None

    @classmethod
    async def ensure_started(cls) -> None:
        if async_playwright is None:
            return
        if cls._pw is None:
            cls._pw = await async_playwright().start()
        if cls._browser is None:
            cls._browser = await cls._pw.chromium.launch(headless=False)
        if cls._page is None:
            # set a fixed downloads path for deterministic browser_download_wait
            context = await cls._browser.new_context(accept_downloads=True)
            cls._page = await context.new_page()

    @classmethod
    def page(cls) -> Optional["Page"]:
        return cls._page


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
_LAST_ITEMS: Optional[List[Dict[str, Any]]] = None
_LAST_SNAPSHOT: Optional[Dict[str, Any]] = None  # { id: str, ts: int, items: List[Dict] }
_CLOSE_BANNERS_PROFILES: Dict[str, Any] = {"global": {"texts": [], "selectors": []}, "domains": {}}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä DOM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
_dom_tools: Optional[MCPDOMTools] = None


def _project_root() -> str:
    try:
        return os.path.dirname(os.path.abspath(__file__))
    except Exception:
        return os.getcwd()


def _profiles_config_path() -> str:
    # config/close_banners_profiles.yml near this file
    base = _project_root()
    return os.path.join(base, "config", "close_banners_profiles.yml")


def _ensure_dir(path: str) -> None:
    try:
        os.makedirs(path, exist_ok=True)
    except Exception:
        pass


def _load_close_banners_profiles() -> None:
    global _CLOSE_BANNERS_PROFILES
    cfg_path = _profiles_config_path()
    try:
        if yaml is None or not os.path.exists(cfg_path):
            return
        with open(cfg_path, "r", encoding="utf-8") as f:
            data = yaml.safe_load(f) or {}
        if not isinstance(data, dict):
            return
        global_section = data.get("global", {}) or {}
        domains_section = data.get("domains", {}) or {}
        _CLOSE_BANNERS_PROFILES = {
            "global": {
                "texts": list(global_section.get("texts", []) or []),
                "selectors": list(global_section.get("selectors", []) or [])
            },
            "domains": domains_section
        }
    except Exception:
        pass


def _get_domain_from_url(url: str) -> str:
    try:
        parsed = urlparse(url)
        return parsed.hostname or ""
    except Exception:
        return ""


def _use_playwright() -> bool:
    return async_playwright is not None


async def _ensure_dom_tools() -> MCPDOMTools:
    """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é DOM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    global _dom_tools
    
    if _dom_tools is None:
        _dom_tools = MCPDOMTools()
        init_result = await _dom_tools.initialize()
        
        if not init_result.get('success'):
            raise Exception(f"Failed to initialize DOM tools: {init_result.get('error')}")
    
    return _dom_tools


# ============================================================================
# –ù–û–í–´–ï DOM –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ (–≤ —Å—Ç–∏–ª–µ browser-use)
# ============================================================================

@mcp.tool()
async def browser_get_state(include_screenshot: bool = False, target_id: Optional[str] = None) -> Dict[str, Any]:
    """
    Get the current page state including all interactive elements with their indices. 
    Essential for interaction with web pages using DOM analyzer.
    
    Args:
        include_screenshot: Whether to include a screenshot of the page
        target_id: Target ID to get state for. If not provided, uses current target
    
    Returns:
        Dict containing page state with indexed interactive elements
    """
    try:
        dom_tools = await _ensure_dom_tools()
        result = await dom_tools.browser_get_state(
            include_screenshot=include_screenshot,
            target_id=target_id
        )
        return result
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@mcp.tool()
async def browser_click(index: int, target_id: Optional[str] = None, open_in_new_tab: bool = False) -> Dict[str, Any]:
    """
    Click on an element by its index from browser_get_state. 
    Supports opening links in new tabs.
    
    Args:
        index: Index of the element to click
        target_id: Target ID to click on. If not provided, uses current target
        open_in_new_tab: Whether to open link in new tab (for link elements)
    
    Returns:
        Dict containing click result information
    """
    try:
        dom_tools = await _ensure_dom_tools()
        result = await dom_tools.browser_click(
            index=index,
            target_id=target_id,
            open_in_new_tab=open_in_new_tab
        )
        return result
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@mcp.tool()
async def browser_type(index: int, text: str, target_id: Optional[str] = None) -> Dict[str, Any]:
    """
    Type text into an input field identified by its index. 
    Use after browser_get_state to find inputs.
    
    Args:
        index: Index of the input element
        text: Text to type into the input field
        target_id: Target ID to type on. If not provided, uses current target
    
    Returns:
        Dict containing type result information
    """
    try:
        dom_tools = await _ensure_dom_tools()
        result = await dom_tools.browser_type(
            index=index,
            text=text,
            target_id=target_id
        )
        return result
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@mcp.tool()
async def browser_navigate_dom(url: str, target_id: Optional[str] = None, new_tab: bool = False) -> Dict[str, Any]:
    """
    Navigate to a URL in the current tab or open a new tab using DOM analyzer.
    Example: Navigate to https://example.com
    
    Args:
        url: URL to navigate to
        target_id: Target ID to navigate on. If not provided, uses current target
        new_tab: Whether to open in new tab
    
    Returns:
        Dict containing navigation result information
    """
    try:
        dom_tools = await _ensure_dom_tools()
        result = await dom_tools.browser_navigate(
            url=url,
            target_id=target_id,
            new_tab=new_tab
        )
        return result
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@mcp.tool()
async def browser_extract_content(extraction_prompt: str, target_id: Optional[str] = None) -> Dict[str, Any]:
    """
    Extract structured content from the page using AI and DOM analyzer. 
    Perfect for scraping specific information.
    
    Args:
        extraction_prompt: AI prompt describing what content to extract
        target_id: Target ID to extract from. If not provided, uses current target
    
    Returns:
        Dict containing extracted content information
    """
    try:
        dom_tools = await _ensure_dom_tools()
        result = await dom_tools.browser_extract_content(
            extraction_prompt=extraction_prompt,
            target_id=target_id
        )
        return result
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@mcp.tool()
async def browser_scroll(direction: str = "down", target_id: Optional[str] = None) -> Dict[str, Any]:
    """
    Scroll the page up or down by one viewport height using DOM analyzer.
    
    Args:
        direction: Direction to scroll ("up" or "down")
        target_id: Target ID to scroll. If not provided, uses current target
    
    Returns:
        Dict containing scroll result information
    """
    try:
        dom_tools = await _ensure_dom_tools()
        result = await dom_tools.browser_scroll(
            direction=direction,
            target_id=target_id
        )
        return result
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@mcp.tool()
async def browser_go_back(target_id: Optional[str] = None) -> Dict[str, Any]:
    """
    Navigate back to the previous page in browser history using DOM analyzer.
    
    Args:
        target_id: Target ID to go back on. If not provided, uses current target
    
    Returns:
        Dict containing go back result information
    """
    try:
        dom_tools = await _ensure_dom_tools()
        result = await dom_tools.browser_go_back(target_id=target_id)
        return result
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@mcp.tool()
async def browser_list_tabs() -> Dict[str, Any]:
    """
    List all open browser tabs with their URLs and titles using DOM analyzer.
    
    Returns:
        Dict containing list of tabs information
    """
    try:
        dom_tools = await _ensure_dom_tools()
        result = await dom_tools.browser_list_tabs()
        return result
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@mcp.tool()
async def dom_analyzer_status() -> Dict[str, Any]:
    """
    Get status and statistics of DOM analyzer tools.
    
    Returns:
        Dict containing DOM analyzer status and usage statistics
    """
    try:
        dom_tools = await _ensure_dom_tools()
        stats = dom_tools.get_usage_stats()
        
        return {
            "success": True,
            "status": "active",
            "statistics": stats,
            "capabilities": [
                "browser_get_state",
                "browser_click", 
                "browser_type",
                "browser_navigate_dom",
                "browser_extract_content",
                "browser_scroll",
                "browser_go_back",
                "browser_list_tabs"
            ]
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


# ============================================================================
# –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
# ============================================================================

@mcp.tool()
async def browser_navigate(url: str, show_overlay: bool = False) -> Dict:
    """Open a URL in the browser (Playwright if available, otherwise stub). Optionally show numeric overlay."""
    if _use_playwright():
        await _BrowserSession.ensure_started()
        page = _BrowserSession.page()
        if page is None:
            return {"status": "error", "error": "browser_not_started"}
        try:
            resp = await page.goto(url, wait_until="load", timeout=20000)
            status = resp.status if resp else None
            if show_overlay:
                # prepare ids and overlay
                await _ensure_data_ids_all_frames(page)
                await _overlay_all_frames(page, scheme="high-contrast")
            # invalidate snapshot on navigation
            global _LAST_SNAPSHOT
            _LAST_SNAPSHOT = None
            return {"status": "ok", "url": url, "httpStatus": status}
        except Exception as e:  # fallback
            return {"status": "error", "error": str(e)}
    return stub_navigate(url)


@mcp.tool()
async def browser_close_banners(
    time_budget_ms: int = 1200,
    max_passes: int = 3,
    strategy: str = "safe",
    languages: Optional[List[str]] = None,
    return_details: bool = True,
) -> Dict:
    """Close cookie/consent/modals overlays across frames/shadow roots with a time budget."""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –ª–æ–≥–∏–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    return {"status": "not_implemented", "message": "Legacy tool - use DOM analyzer tools instead"}


@mcp.tool()
async def browser_extract_summary() -> Dict:
    """Extract a summary of the current page content."""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –ª–æ–≥–∏–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    return {"status": "not_implemented", "message": "Legacy tool - use browser_extract_content instead"}


@mcp.tool()
async def browser_download_wait() -> Dict:
    """Wait for browser downloads to complete."""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –ª–æ–≥–∏–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    return {"status": "not_implemented", "message": "Legacy tool - use DOM analyzer tools instead"}


@mcp.tool()
async def browser_list_interactives() -> Dict:
    """List interactive elements on the current page with numeric IDs."""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –ª–æ–≥–∏–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    return {"status": "not_implemented", "message": "Legacy tool - use browser_get_state instead"}


@mcp.tool()
async def browser_overlay_show(scheme: str = "high-contrast") -> Dict:
    """Show numeric overlay on interactive elements."""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –ª–æ–≥–∏–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    return {"status": "not_implemented", "message": "Legacy tool - use DOM analyzer tools instead"}


@mcp.tool()
async def browser_overlay_act(id: int, action: str = "click") -> Dict:
    """Act on an element by its numeric ID from overlay."""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –ª–æ–≥–∏–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    return {"status": "not_implemented", "message": "Legacy tool - use browser_click instead"}


@mcp.tool()
async def browser_click_selector(selector: str) -> Dict:
    """Click on an element using CSS selector."""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –ª–æ–≥–∏–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    return {"status": "not_implemented", "message": "Legacy tool - use browser_click with index instead"}


@mcp.tool()
async def browser_type_selector(selector: str, text: str) -> Dict:
    """Type text into an element using CSS selector."""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –ª–æ–≥–∏–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    return {"status": "not_implemented", "message": "Legacy tool - use browser_type with index instead"}


@mcp.tool()
async def browser_click_text(text: str) -> Dict:
    """Click on an element containing specific text."""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –ª–æ–≥–∏–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    return {"status": "not_implemented", "message": "Legacy tool - use browser_click with index instead"}


@mcp.tool()
async def browser_type_text(text: str, input_text: str) -> Dict:
    """Type text into an input field containing specific text."""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –ª–æ–≥–∏–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    return {"status": "not_implemented", "message": "Legacy tool - use browser_type with index instead"}


@mcp.tool()
async def browser_act_by_text(text: str, action: str = "click") -> Dict:
    """Perform an action on an element containing specific text."""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –ª–æ–≥–∏–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    return {"status": "not_implemented", "message": "Legacy tool - use browser_click with index instead"}


@mcp.tool()
async def browser_click_by_text(text: str) -> Dict:
    """Click on an element containing specific text."""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –ª–æ–≥–∏–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    return {"status": "not_implemented", "message": "Legacy tool - use browser_click with index instead"}


@mcp.tool()
async def browser_type_by_text(text: str, input_text: str) -> Dict:
    """Type text into an input field containing specific text."""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –ª–æ–≥–∏–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    return {"status": "not_implemented", "message": "Legacy tool - use browser_type with index instead"}


@mcp.tool()
async def files_search(query: str, timeout_s: int = 10) -> Dict:
    """Search for files by name or content."""
    return stub_search_files(query)


@mcp.tool()
async def files_read_text(path: str, max_chars: int = 500, timeout_s: int = 8) -> Dict:
    """Read text file content."""
    return stub_read_text(path)


# ============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
# ============================================================================

async def _ensure_data_ids_all_frames(page: Any) -> None:
    """Ensure data IDs are set for all frames (stub for compatibility)."""
    pass


async def _overlay_all_frames(page: Any, scheme: str) -> None:
    """Show overlay on all frames (stub for compatibility)."""
    pass


# ============================================================================
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ============================================================================

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞ —Å DOM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º...")
    print("üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
    print("   üì± DOM Analyzer –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–Ω–æ–≤—ã–µ):")
    print("     - browser_get_state: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    print("     - browser_click: –∫–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º –ø–æ –∏–Ω–¥–µ–∫—Å—É")
    print("     - browser_type: –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª—è")
    print("     - browser_navigate_dom: –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ URL")
    print("     - browser_extract_content: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    print("     - browser_scroll: –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    print("     - browser_go_back: –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞–∑–∞–¥")
    print("     - browser_list_tabs: —Å–ø–∏—Å–æ–∫ –≤–∫–ª–∞–¥–æ–∫")
    print("     - dom_analyzer_status: —Å—Ç–∞—Ç—É—Å DOM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞")
    print("   üîÑ Legacy –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏):")
    print("     - browser_navigate: –Ω–∞–≤–∏–≥–∞—Ü–∏—è (Playwright)")
    print("     - files_search: –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤")
    print("     - files_read_text: —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DOM –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    try:
        await _ensure_dom_tools()
        print("‚úÖ DOM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è  DOM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {e}")
        print("   Legacy –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ DOM –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    print("\nüéØ MCP —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DOM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä –≤ —Ä–µ–∂–∏–º–µ stdio
    import sys
    if len(sys.argv) > 1 and sys.argv[1] == "--stdio":
        # –†–µ–∂–∏–º stdio –¥–ª—è MCP
        print("üöÄ MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ stdio", file=sys.stderr)
        # –ó–∞–ø—É—Å–∫–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä –≤ stdio —Ä–µ–∂–∏–º–µ
        import asyncio
        asyncio.run(mcp.run_stdio_async())
    else:
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        asyncio.run(main())
