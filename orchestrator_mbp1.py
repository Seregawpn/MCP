import argparse
import asyncio
import base64
import json
import os
import re
import sys
import time
import uuid
from datetime import datetime
from typing import Any, Dict, List, Optional, Tuple

# MCP client
from mcp import ClientSession, StdioServerParameters  # type: ignore
from mcp.client.stdio import stdio_client  # type: ignore


RUNS_DIR = os.path.join(os.path.dirname(__file__), "agent_runs")
DOCS_DIR = os.path.join(os.path.dirname(__file__), "docs")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
ITEMS_LIMIT = 120  # –ï–¥–∏–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –≤—Å–µ—Ö –≤—ã–∑–æ–≤–æ–≤ –Ω—É–º–µ—Ä–∞—Ü–∏–∏


def _now_iso() -> str:
  # timezone-aware would be better, but keep consistent with mbp0
  return datetime.utcnow().isoformat() + "Z"


def _ensure_dir(path: str) -> None:
  os.makedirs(path, exist_ok=True)


def write_event(run_dir: str, event: Dict[str, Any]) -> None:
  _ensure_dir(run_dir)
  events_path = os.path.join(run_dir, "steps.jsonl")
  with open(events_path, "a", encoding="utf-8") as f:
    f.write(json.dumps(event, ensure_ascii=False) + "\n")


def write_meta(run_dir: str, meta: Dict[str, Any]) -> None:
  _ensure_dir(run_dir)
  meta_path = os.path.join(run_dir, "meta.json")
  with open(meta_path, "w", encoding="utf-8") as f:
    json.dump(meta, f, ensure_ascii=False, indent=2)


def write_text(run_dir: str, filename: str, content: str) -> str:
  _ensure_dir(run_dir)
  path = os.path.join(run_dir, filename)
  with open(path, "w", encoding="utf-8") as f:
    f.write(content)
  return path


def load_system_prompt() -> str:
  path = os.path.join(DOCS_DIR, "SYSTEM_PROMPT_–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.md")
  if not os.path.exists(path):
    return ""
  with open(path, "r", encoding="utf-8") as f:
    return f.read()


def try_import_gemini():
  try:
    from google import genai  # type: ignore
    return genai
  except Exception:
    return None


def build_llm_input(goal: str, step_summary: str, system_prompt: str) -> str:
  # Keep it simple: concatenate with clear delimiters
  parts = [
    "SYSTEM:\n" + system_prompt.strip(),
    "GOAL:\n" + goal.strip(),
  ]
  
  # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
  if step_summary:
    parts.append("CONTEXT (last steps/results):\n" + step_summary.strip())
  
  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∞–Ω–∞–ª–∏–∑—É
  parts.append(
    "ANALYSIS INSTRUCTIONS:\n"
    "1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É - —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ?\n"
    "2. –û—Ü–µ–Ω–∏–≤–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å - —á—Ç–æ —É–∂–µ —Å–¥–µ–ª–∞–Ω–æ?\n"
    "3. –ü–ª–∞–Ω–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?\n"
    "4. –ò–∑–±–µ–≥–∞–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π - –Ω–µ –¥–µ–ª–∞–π –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ!\n"
  )
  
  # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
  parts.append(
    "OUTPUT INSTRUCTIONS:\n"
    "–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –ë–ï–ó markdown —Ä–∞–∑–º–µ—Ç–∫–∏:\n"
    "{\n"
    '  "mode": "act",\n'
    '  "tool": "browser_navigate",\n'
    '  "args": {"url": "https://amazon.com"},\n'
    '  "rationale": "–û—Ç–∫—Ä—ã–≤–∞—é Amazon –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—Ä–æ—Å—Å–æ–≤–æ–∫"\n'
    "}\n"
    "‚ö†Ô∏è –í–ê–ñ–ù–û: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π ```json –∏–ª–∏ ``` –±–ª–æ–∫–∏! –¢–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON!\n"
    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:\n"
    "- browser_navigate(url) - –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ\n"
    "- browser_click_text(text) - –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ —Ç–µ–∫—Å—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'Continue shopping')\n"
    "- browser_type_text(field, text) - –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'search', 'Adidas sneakers')\n"
    "- browser_click_selector(selector) - –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'button[name=\"Continue\"]')\n"
    "- browser_type_selector(selector, text) - –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—É\n"
    "–†–µ–∂–∏–º—ã: act (–¥–µ–π—Å—Ç–≤–∏–µ), ask (–≤–æ–ø—Ä–æ—Å), done (–∑–∞–≤–µ—Ä—à–µ–Ω–æ)\n"
    "–ü–†–ê–í–ò–õ–û: –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∏–∑–±–µ–≥–∞–π —Å–ª–æ–∂–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π!\n"
    "–°–¢–†–ê–¢–ï–ì–ò–Ø: 1) –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ü–µ–ª—å ‚Üí 2) –í—ã–±–∏—Ä–∞–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ‚Üí 3) –î–µ–π—Å—Ç–≤—É–π!"
  )
  return "\n\n".join(parts)


def summarize_steps_for_llm(history: List[Dict[str, Any]], max_events: int = 8) -> str:
  # Build a compact textual summary of last N events
  tail = history[-max_events:]
  lines: List[str] = []
  
  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  lines.append("=== –ü–û–°–õ–ï–î–ù–ò–ï –°–û–ë–´–¢–ò–Ø ===")
  
  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π URL –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π
  current_url = None
  for ev in reversed(tail):
    if ev.get("tool") == "browser_navigate":
      args = ev.get("args") or ev.get("call", {}).get("args")
      if args and "url" in args:
        current_url = args["url"]
        break
  
  if current_url:
    lines.append(f"üåê –¢–µ–∫—É—â–∏–π URL: {current_url}")
  
  for ev in tail:
    tool = ev.get("tool") or ev.get("type")
    status = ev.get("status") or ev.get("result", {}).get("status")
    progress = ev.get("progress")
    
    # –í–∫–ª—é—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è LLM
    if ev.get("type") == "page_analysis":
      lines.append(f"üìÑ –°–¢–†–ê–ù–ò–¶–ê: {progress}")
      page_text = ev.get("page_text", "")
      if page_text:
        lines.append(f"üìù –¢–µ–∫—Å—Ç: {page_text[:300]}...")
    
    elif ev.get("type") == "page_update":
      lines.append(f"üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï: {progress}")
      page_text = ev.get("page_text", "")
      if page_text:
        lines.append(f"üìù –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: {page_text[:300]}...")
    
    elif progress:
      lines.append(f"üìã –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}")
    
    if tool:
      args = ev.get("args") or ev.get("call", {}).get("args")
      if args is None:
        args = ev.get("function_call", {}).get("arguments")
      lines.append(f"üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool} | –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {json.dumps(args, ensure_ascii=False)} | –°—Ç–∞—Ç—É—Å: {status}")
    
    # Include useful page context if available
    try:
      res = ev.get("result") or {}
      title = (res.get("result", {}) or {}).get("title") or res.get("title")
      summary = (res.get("result", {}) or {}).get("summary") or res.get("summary")
      if title:
        lines.append(f"üìå –ó–∞–≥–æ–ª–æ–≤–æ–∫: {str(title)[:160]}")
      if summary:
        # include only first 200 chars to keep prompt compact
        lines.append(f"üìÑ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {str(summary)[:200]}")
    except Exception:
      pass
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏
    lines.append("---")
  
  # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  lines.append("=== –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï ===")
  lines.append(f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(tail)}")
  
  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø
  if any(ev.get("type") == "page_analysis" for ev in tail):
    lines.append("üìç –≠—Ç–∞–ø: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ")
  elif any(ev.get("type") == "page_update" for ev in tail):
    lines.append("üìç –≠—Ç–∞–ø: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥")
  else:
    lines.append("üìç –≠—Ç–∞–ø: –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è")
  
  return "\n".join(lines)


async def maybe_capture_screenshot(session: ClientSession, run_dir: str, step_idx: int, force: bool = False) -> Optional[str]:
  """Capture one screenshot per new page state (throttled)."""
  try:
    res = await asyncio.wait_for(session.call_tool("browser_screenshot", arguments={"full_page": False}), timeout=8.0)
    try:
      structured = getattr(res, "structuredContent", None)
    except Exception:
      structured = None
    if isinstance(structured, dict):
      path = structured.get("result", {}).get("path") or structured.get("path")
    else:
      path = None
    if path:
      write_event(run_dir, {"ts": _now_iso(), "type": "screenshot", "step": step_idx, "path": path})
      return path
  except Exception as e:
    write_event(run_dir, {"ts": _now_iso(), "type": "screenshot_error", "step": step_idx, "error": str(e)})
  return None


def clean_llm_response(text: str) -> str:
  """Clean LLM response from markdown formatting and extract pure JSON."""
  if not text:
    return text
  
  # Remove markdown code blocks
  text = text.strip()
  
  # Remove ```json and ``` markers
  if text.startswith("```json"):
    text = text[7:]  # Remove ```json
  elif text.startswith("```"):
    text = text[3:]   # Remove ```
  
  if text.endswith("```"):
    text = text[:-3]  # Remove trailing ```
  
  return text.strip()


def parse_llm_output(text: str) -> Tuple[str, Dict[str, Any]]:
  """Parse LLM output in single mode schema format.
  
  Expected format:
  {
    "mode": "act|ask|done",
    "tool": "tool_name",  # only for mode="act"
    "args": {...},        # only for mode="act" 
    "question": "...",    # only for mode="ask"
    "result": "...",      # only for mode="done"
    "rationale": "explanation"
  }
  """
  print(f"üîç DEBUG: –ü–∞—Ä—Å–∏–Ω–≥ LLM –æ—Ç–≤–µ—Ç–∞: {repr(text)}")
  print(f"üîç DEBUG: –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
  
  # Clean the response from markdown formatting
  cleaned_text = clean_llm_response(text)
  print(f"üîç DEBUG: –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {repr(cleaned_text)}")
  
  try:
    obj = json.loads(cleaned_text)
    print(f"üîç DEBUG: JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω: {type(obj)}")
    print(f"üîç DEBUG: –ö–ª—é—á–∏ –æ–±—ä–µ–∫—Ç–∞: {list(obj.keys()) if isinstance(obj, dict) else '–Ω–µ —Å–ª–æ–≤–∞—Ä—å'}")
    
    if not isinstance(obj, dict):
      raise ValueError("Response must be a JSON object")
    
    mode = obj.get("mode")
    print(f"üîç DEBUG: –†–µ–∂–∏–º: {mode}")
    
    rationale = str(obj.get("rationale", "")).strip()
    print(f"üîç DEBUG: –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {rationale}")
    
    if mode == "act":
      tool = str(obj.get("tool", "")).strip()
      args = obj.get("args", {}) or {}
      print(f"üîç DEBUG: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool}")
      print(f"üîç DEBUG: –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {args}")
      
      if not tool:
        raise ValueError("mode='act' requires 'tool' field")
      return rationale, {"name": tool, "arguments": args}
    
    elif mode == "ask":
      question = str(obj.get("question", "")).strip()
      print(f"üîç DEBUG: –í–æ–ø—Ä–æ—Å: {question}")
      
      if not question:
        raise ValueError("mode='ask' requires 'question' field")
      return rationale, {"name": "assistant_ask", "arguments": {"question": question}}
    
    elif mode == "done":
      result = str(obj.get("result", "")).strip()
      print(f"üîç DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
      
      if not result:
        raise ValueError("mode='done' requires 'result' field")
      evidence = obj.get("evidence", {}) or {}
      return rationale, {"name": "assistant_done", "arguments": {"reason": result, "evidence": evidence}}
    
    else:
      raise ValueError(f"Invalid mode: {mode}. Must be 'act', 'ask', or 'done'")
    
  except Exception as e:
    print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
    print(f"üîç DEBUG: –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
    raise ValueError(f"Failed to parse LLM response: {e}. Expected JSON with 'mode' field.")


def normalize_tool_name(name: str) -> str:
  # Map dotted names to server snake_case
  mapping = {
    "browser.navigate": "browser_navigate",
    "browser.wait": "browser_wait",
    "browser.list_interactives": "browser_list_interactives",
    "browser.overlay_show": "browser_overlay_show",
    "browser.overlay_hide": "browser_overlay_hide",
    "browser.overlay_act": "browser_overlay_act",
    "browser.find": "browser_find",
    "browser.press": "browser_press",
    "browser.scroll": "browser_scroll",
    "browser.extract": "browser_extract_universal",  # –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
    "browser.open_in_new_tab": "browser_open_in_new_tab",
    "browser.switch_tab": "browser_switch_tab",
    "browser.screenshot": "browser_screenshot",
    "browser.click_and_wait_download": "browser_click_and_wait_download",
    "browser.download_wait": "browser_download_wait",
    "browser.upload": "browser_upload",
    "browser.close_banners": "browser_close_banners",
    "assistant_done": "assistant_done",
    "assistant_ask": "assistant_ask",
    "browser.check_page_state": "browser_check_page_state",  # –ù–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  }
  return mapping.get(name, name)


def is_post_hook_trigger(logical_name: str) -> bool:
  return logical_name in (
    "browser_navigate",
    "browser_reload", 
    "browser_open_in_new_tab",
    "browser_switch_tab",
    "browser_overlay_act",
  )


def is_new_page_trigger(name: str) -> bool:
  # Fire numeric overlay auto-show after navigation/tab changes
  return name in {
    "browser_navigate",
    "browser_reload",
    "browser_open_in_new_tab",
    "browser_switch_tab",
    "browser_back",
    "browser_forward",
  }


async def run_c6_loop(goal: str, max_steps: int, model_name: str, run_dir: str) -> None:
  system_prompt = load_system_prompt()
  genai = try_import_gemini()
  if genai is None:
    print("google-genai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install google-genai", file=sys.stderr)
    return

  api_key = os.environ.get("GEMINI_API_KEY") or os.environ.get("GOOGLE_API_KEY")
  if not api_key:
    print("–ù–µ –Ω–∞–π–¥–µ–Ω GEMINI_API_KEY/GOOGLE_API_KEY –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.", file=sys.stderr)
    return

  # DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
  print(f"üîç DEBUG: API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω, –¥–ª–∏–Ω–∞: {len(api_key)} —Å–∏–º–≤–æ–ª–æ–≤")
  print(f"üîç DEBUG: –ü–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤: {api_key[:10]}...")
  print(f"üîç DEBUG: –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–º–≤–æ–ª–æ–≤: ...{api_key[-10:]}")
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞
  if not api_key.startswith("AIza"):
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: API –∫–ª—é—á –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'AIza' - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

  client = genai.Client(api_key=api_key)
  print(f"üîç DEBUG: Gemini –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {type(client)}")

  server_params = StdioServerParameters(command="python3", args=["mcp_server.py"])
  print(f"üîç DEBUG: MCP —Å–µ—Ä–≤–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {server_params}")
  
  async with stdio_client(server_params) as (read, write):
    print("üîç DEBUG: MCP –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
    async with ClientSession(read, write) as session:
      print("üîç DEBUG: MCP —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞")
      await session.initialize()
      print("üîç DEBUG: MCP —Å–µ—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

      last_close_ts = 0.0
      last_llm_ts = 0.0
      last_screenshot_path: Optional[str] = None
      history: List[Dict[str, Any]] = []

      # Feature flags and thresholds (simplified)
      not_found_retries = int(os.environ.get("NOT_FOUND_RETRIES", "2") or "2")
      fallback_on_not_found = os.environ.get("FALLBACK_ON_NOT_FOUND", "1") not in {"0", "false", "False"}

      error_counters: Dict[str, int] = {}

      for step_idx in range(1, max_steps + 1):
        # Build prompt (simplified - no items analysis)
        step_summary = summarize_steps_for_llm(history)
        llm_input = build_llm_input(goal, step_summary, system_prompt)

        write_event(run_dir, {"ts": _now_iso(), "type": "llm_request", "step": step_idx, "input_len": len(llm_input)})
        try:
          pth = write_text(run_dir, f"llm_input_step_{step_idx}.txt", llm_input)
          write_event(run_dir, {"ts": _now_iso(), "type": "llm_input_saved", "step": step_idx, "path": pth})
        except Exception:
          pass

        # Throttle LLM calls to avoid 429
        try:
          delta = time.monotonic() - last_llm_ts
          if delta < 7.0:
            wait_s = round(7.0 - delta, 2)
            write_event(run_dir, {"ts": _now_iso(), "type": "llm_throttle_wait", "step": step_idx, "seconds": wait_s})
            time.sleep(wait_s)
        except Exception:
          pass

        # Call Gemini with retry/backoff on 429
        out_text = ""
        llm_error: Optional[str] = None
        
        # DEBUG: Log the prompt being sent to LLM
        print(f"\nüîç DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è—é LLM –ø—Ä–æ–º–ø—Ç –¥–ª–∏–Ω–æ–π {len(llm_input)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üîç DEBUG: –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ–º–ø—Ç–∞: {llm_input[:200]}...")
        
        for attempt in range(0, 3):
          try:
            parts: List[Dict[str, Any]] = [{"text": llm_input}]
            try:
              if last_screenshot_path and os.path.exists(last_screenshot_path):
                with open(last_screenshot_path, "rb") as img_f:
                  img_b64 = base64.b64encode(img_f.read()).decode("ascii")
                parts.append({"inline_data": {"mime_type": "image/png", "data": img_b64}})
            except Exception as _:
              pass
            
            print(f"üîç DEBUG: –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3 - –≤—ã–∑—ã–≤–∞—é Gemini API...")
            resp = client.models.generate_content(model=model_name, contents=[{"role": "user", "parts": parts}])
            
            # DEBUG: Log raw response
            print(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini, —Ç–∏–ø: {type(resp)}")
            print(f"üîç DEBUG: –ê—Ç—Ä–∏–±—É—Ç—ã –æ—Ç–≤–µ—Ç–∞: {dir(resp)}")
            
            out_text = getattr(resp, "text", None) or ""
            print(f"üîç DEBUG: resp.text = {repr(out_text)}")
            
            if not out_text:
              try:
                candidates = getattr(resp, "candidates", [])
                print(f"üîç DEBUG: –ö–∞–Ω–¥–∏–¥–∞—Ç—ã: {len(candidates)}")
                for i, c in enumerate(candidates):
                  print(f"üîç DEBUG: –ö–∞–Ω–¥–∏–¥–∞—Ç {i}: {dir(c)}")
                  candidate_text = getattr(c, "text", None)
                  print(f"üîç DEBUG: –ö–∞–Ω–¥–∏–¥–∞—Ç {i} —Ç–µ–∫—Å—Ç: {repr(candidate_text)}")
                out_text = "\n".join([c.text for c in candidates if getattr(c, "text", None)])
                print(f"üîç DEBUG: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {repr(out_text)}")
              except Exception as e:
                print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {e}")
                out_text = ""
            
            print(f"üîç DEBUG: –§–∏–Ω–∞–ª—å–Ω—ã–π out_text: {repr(out_text)}")
            
            llm_error = None
            last_llm_ts = time.monotonic()
            break
          except Exception as e:
            err_str = str(e)
            llm_error = err_str
            print(f"üîç DEBUG: –û—à–∏–±–∫–∞ Gemini API (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {err_str}")
            # Detect quota/429
            if "RESOURCE_EXHAUSTED" in err_str or "429" in err_str:
              # Try to parse retryDelay like "retryDelay': '57s'"
              m = re.search(r"retryDelay[^\d]*(\d+)s", err_str)
              if m:
                wait_s = max(5, int(m.group(1)))
              else:
                wait_s = 8 + 4 * attempt
              write_event(run_dir, {"ts": _now_iso(), "type": "llm_retry", "step": step_idx, "attempt": attempt + 1, "wait_s": wait_s, "error": err_str})
              print(f"üîç DEBUG: –û–∂–∏–¥–∞–Ω–∏–µ {wait_s} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
              time.sleep(wait_s)
              continue
            else:
              write_event(run_dir, {"ts": _now_iso(), "type": "llm_error", "step": step_idx, "error": err_str})
              break
        if llm_error and not out_text:
          # Give up this run on persistent LLM error
          print(f"üîç DEBUG: –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –æ—à–∏–±–∫–∞: {llm_error}")
          break

        write_event(run_dir, {"ts": _now_iso(), "type": "llm_response", "step": step_idx, "text": out_text})
        
        # DEBUG: Log what we got from LLM
        print(f"üîç DEBUG: LLM –æ—Ç–≤–µ—Ç–∏–ª: {repr(out_text)}")
        if not out_text or out_text.strip() == "":
          print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: LLM –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç!")
          print("üö® –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
          print("üö® 1. –ü—Ä–æ–±–ª–µ–º–∞ —Å Gemini API –∫–ª—é—á–æ–º")
          print("üö® 2. –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–º–ø—Ç–æ–º (—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π/—Å–ª–æ–∂–Ω—ã–π)")
          print("üö® 3. –ü—Ä–æ–±–ª–µ–º–∞ —Å –º–æ–¥–µ–ª—å—é Gemini")
          print("üö® 4. –°–µ—Ç–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
          
          # FALLBACK: –ü—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ LLM
          print("üîÑ –ê–∫—Ç–∏–≤–∏—Ä—É—é fallback —Ä–µ–∂–∏–º...")
          if "amazon" in goal.lower():
            fallback_tool = "browser_navigate"
            fallback_args = {"url": "https://amazon.com"}
            fallback_rationale = "–û—Ç–∫—Ä—ã–≤–∞—é Amazon (fallback —Ä–µ–∂–∏–º)"
            print(f"üîÑ Fallback: {fallback_tool} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ {fallback_args}")
            return fallback_rationale, {"name": fallback_tool, "arguments": fallback_args}
          elif "google" in goal.lower():
            fallback_tool = "browser_navigate"
            fallback_args = {"url": "https://google.com"}
            fallback_rationale = "–û—Ç–∫—Ä—ã–≤–∞—é Google (fallback —Ä–µ–∂–∏–º)"
            print(f"üîÑ Fallback: {fallback_tool} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ {fallback_args}")
            return fallback_rationale, {"name": fallback_tool, "arguments": fallback_args}
          else:
            print("üîÑ Fallback: –ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–∞–π—Ç, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É")
            break

        # Parse
        try:
          progress, fcall = parse_llm_output(out_text or "")
        except Exception as e:
          excerpt = (out_text or "")[:500]
          write_event(run_dir, {"ts": _now_iso(), "type": "parse_error", "step": step_idx, "error": str(e), "response_excerpt": excerpt})
          
          # Simple fallback: ask LLM to retry with correct format
          print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ LLM: {e}")
          print("LLM –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –ø–æ–ª–µ–º 'mode'")
          print("–ü–æ–≤—Ç–æ—Ä—è—é –∑–∞–ø—Ä–æ—Å...")
          
          # Wait before retry
          time.sleep(2.0)
          continue

        logical_name = fcall.get("name", "")
        args = fcall.get("arguments", {}) or {}

        write_event(run_dir, {"ts": _now_iso(), "type": "tool_mapping", "logical": logical_name, "mapped": normalize_tool_name(logical_name)})

        # Handle assistant_ask/done locally
        if logical_name == "assistant_done":
          write_event(run_dir, {"ts": _now_iso(), "type": "assistant_done", "reason": args.get("reason", ""), "step": step_idx, "progress": progress})
          break
        if logical_name == "assistant_ask":
          question = str(args.get("question", ""))
          write_event(run_dir, {"ts": _now_iso(), "type": "assistant_ask", "question": question, "step": step_idx, "progress": progress})
          print("–í–æ–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:", question)
          print("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ Enter:", flush=True)
          user_answer = sys.stdin.readline().strip()
          # Feed answer back into history context
          history.append({"type": "user_answer", "text": user_answer})
          # Pause between iterations
          time.sleep(4.0)
          continue

        mapped = normalize_tool_name(logical_name)

        # Execute tool call (simplified - no complex validation)
        write_event(run_dir, {"ts": _now_iso(), "type": "tool_call", "step": step_idx, "progress": progress, "tool": mapped, "args": args})
        print(f"üîç DEBUG: –í–´–ü–û–õ–ù–Ø–Æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {mapped} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {args}")
        
        t0 = time.monotonic()
        try:
          # per-call timeout to prevent hanging tools
          print(f"üîç DEBUG: –í—ã–∑—ã–≤–∞—é session.call_tool({mapped}, {args})...")
          call_res = await asyncio.wait_for(session.call_tool(mapped, arguments=args), timeout=20.0)
          print(f"üîç DEBUG: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: {type(call_res)}")
          
          try:
            structured = getattr(call_res, "structuredContent", None)
          except Exception:
            structured = None
          result_obj: Dict[str, Any]
          if structured is None:
            # Fallback: collect any text content
            text_blocks = []
            for c in getattr(call_res, "content", []) or []:
              try:
                text = getattr(c, "text", None)
                if text:
                  text_blocks.append(text)
              except Exception:
                pass
            result_obj = {"status": "ok", "text": "\n".join(text_blocks)}
          else:
            result_obj = structured
          dur_ms = int((time.monotonic() - t0) * 1000)
          print(f"üîç DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result_obj}")
          write_event(run_dir, {"ts": _now_iso(), "type": "tool_result", "step": step_idx, "tool": mapped, "result": result_obj, "duration_ms": dur_ms})

          # Auto post-hook: close banners (throttled)
          try:
            now_ts = time.monotonic()
            if is_post_hook_trigger(logical_name) and (now_ts - last_close_ts) >= 2.0:
              cb_args = {
                "time_budget_ms": 2500,
                "max_passes": 3,
                "strategy": "safe",
                "languages": ["en", "ru"],
                "return_details": False,
              }
              write_event(run_dir, {"ts": _now_iso(), "type": "post_hook_call", "hook": "browser_close_banners", "args": cb_args})
              _ = await asyncio.wait_for(session.call_tool("browser_close_banners", arguments=cb_args), timeout=6.0)
              write_event(run_dir, {"ts": _now_iso(), "type": "post_hook_result", "hook": "browser_close_banners", "result": {}})
              last_close_ts = now_ts
          except Exception:
            pass

          # Auto post-hook: wait and screenshot after navigation
          try:
            if is_new_page_trigger(logical_name):
              write_event(run_dir, {"ts": _now_iso(), "type": "post_hook_call", "hook": "auto_wait", "args": {"ms": 2000}})
              _ = await asyncio.wait_for(session.call_tool("browser_wait", arguments={"ms": 2000}), timeout=8.0)
              write_event(run_dir, {"ts": _now_iso(), "type": "post_hook_result", "hook": "auto_wait", "result": {}})

              # Capture screenshot for LLM context
              last_screenshot_path = await maybe_capture_screenshot(session, run_dir, step_idx)

              # –ê–ù–ê–õ–ò–ó –°–¢–†–ê–ù–ò–¶–´: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è LLM
              try:
                write_event(run_dir, {"ts": _now_iso(), "type": "post_hook_call", "hook": "auto_extract_text", "args": {"mode": "adaptive"}})
                extract_result = await asyncio.wait_for(session.call_tool("browser_extract_universal", arguments={"mode": "adaptive", "max_text_length": 5000, "timeout_ms": 12000}), timeout=15.0)
                write_event(run_dir, {"ts": _now_iso(), "type": "post_hook_result", "hook": "auto_extract_text", "result": {}})
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è LLM
                try:
                  extract_structured = getattr(extract_result, "structuredContent", None)
                  if isinstance(extract_structured, dict):
                    text_content = extract_structured.get("result", {}).get("text", "")
                    if text_content:
                      # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                      page_summary = text_content[:500]  # –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
                      history.append({
                        "type": "page_analysis",
                        "progress": f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
                        "page_text": page_summary,
                        "result": {"title": None, "summary": None},
                      })
                except Exception as e:
                  write_event(run_dir, {"ts": _now_iso(), "type": "page_analysis_error", "error": str(e), "step": step_idx})
              except Exception as e:
                write_event(run_dir, {"ts": _now_iso(), "type": "auto_extract_text_error", "error": str(e), "step": step_idx})
          except Exception:
            pass

          # Append to history
          history.append({
            "progress": progress,
            "tool": logical_name,
            "call": {"name": mapped, "args": args},
            "result": result_obj,
            "status": result_obj.get("status") if isinstance(result_obj, dict) else None,
            "timestamp": _now_iso(),
            "step": step_idx,
          })

          # –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–ê –î–ï–ô–°–¢–í–ò–Ø: –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è LLM
          try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
            action_result = {
              "action": logical_name,
              "status": "completed",
              "timestamp": _now_iso(),
              "step": step_idx,
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if isinstance(result_obj, dict):
              # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É result_obj
              actual_result = result_obj.get("result", result_obj)  # –ü–æ–ª—É—á–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–π result –∏–ª–∏ —Å–∞–º –æ–±—ä–µ–∫—Ç
              
              if actual_result.get("status") == "ok":
                action_result["success"] = True
                action_result["details"] = actual_result
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å
                if "action" in actual_result:
                  action_result["what_happened"] = actual_result["action"]
                if "text" in actual_result:
                  action_result["text_result"] = actual_result["text"][:200]
                if "url" in actual_result:
                  action_result["current_url"] = actual_result["url"]
              else:
                action_result["success"] = False
                action_result["error"] = actual_result.get("error", "Unknown error")
            else:
              action_result["success"] = True
              action_result["details"] = str(result_obj)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            history.append({
              "type": "action_result",
              "progress": f"–î–µ–π—Å—Ç–≤–∏–µ '{logical_name}' –≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
              "result": action_result,
            })
            
            print(f"üîç DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é: {action_result}")
            
          except Exception as e:
            print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è: {e}")

          # –ê–ù–ê–õ–ò–ó –°–¢–†–ê–ù–ò–¶–´ –ü–û–°–õ–ï –î–ï–ô–°–¢–í–ò–Ø: –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è LLM
          try:
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å
            await asyncio.sleep(1.0)
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            force_analysis = logical_name in ["browser_type_text", "browser_click_selector", "browser_click_text"]
            if force_analysis:
              print(f"üîç DEBUG: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è {logical_name}")
              
              # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è LLM —á—Ç–æ–±—ã –æ–Ω –≤–∏–¥–µ–ª –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
              try:
                screenshot_path = await maybe_capture_screenshot(session, run_dir, step_idx)
                if screenshot_path:
                  last_screenshot_path = screenshot_path
                  print(f"üîç DEBUG: –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è {logical_name}: {screenshot_path}")
              except Exception as e:
                print(f"üîç DEBUG: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            
            write_event(run_dir, {"ts": _now_iso(), "type": "post_action_call", "hook": "auto_extract_text", "args": {"mode": "adaptive"}})
            extract_result = await asyncio.wait_for(session.call_tool("browser_extract_universal", arguments={"mode": "adaptive", "max_text_length": 5000, "timeout_ms": 12000}), timeout=15.0)
            write_event(run_dir, {"ts": _now_iso(), "type": "post_action_result", "hook": "auto_extract_text", "result": {}})
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è LLM
            try:
              extract_structured = getattr(extract_result, "structuredContent", None)
              print(f"üîç DEBUG: extract_result —Ç–∏–ø: {type(extract_result)}")
              print(f"üîç DEBUG: extract_structured: {extract_structured}")
              
              if isinstance(extract_structured, dict):
                text_content = extract_structured.get("result", {}).get("text", "")
                print(f"üîç DEBUG: text_content –¥–ª–∏–Ω–∞: {len(text_content) if text_content else 0}")
                print(f"üîç DEBUG: text_content –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {repr(text_content[:200]) if text_content else 'None'}")
                
                if text_content:
                  # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                  page_summary = text_content[:500]  # –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
                  
                  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                  if "search" in logical_name.lower() or "click" in logical_name.lower():
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                    if "results" in text_content.lower() or "video" in text_content.lower():
                      progress_msg = f"–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω! –ù–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {text_content[:100]}..."
                    elif "playing" in text_content.lower() or "duration" in text_content.lower():
                      progress_msg = f"–í–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–æ! –ú—É–∑—ã–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è"
                    else:
                      progress_msg = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã"
                  else:
                    progress_msg = f"–ü–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è '{logical_name}' —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
                  
                  history.append({
                    "type": "page_update",
                    "progress": progress_msg,
                    "page_text": page_summary,
                    "result": {"action": logical_name, "status": "completed"},
                  })
                  
                  # DEBUG: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ LLM –ø–æ–ª—É—á–∏—Ç
                  print(f"üîç DEBUG: LLM –ø–æ–ª—É—á–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_summary[:100]}...")
                else:
                  print(f"üîç DEBUG: –¢–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è {logical_name}")
                  print(f"üîç DEBUG: extract_structured –∫–ª—é—á–∏: {list(extract_structured.keys()) if isinstance(extract_structured, dict) else '–Ω–µ —Å–ª–æ–≤–∞—Ä—å'}")
                  if isinstance(extract_structured, dict):
                    print(f"üîç DEBUG: extract_structured['result']: {extract_structured.get('result')}")
            except Exception as e:
              write_event(run_dir, {"ts": _now_iso(), "type": "post_action_analysis_error", "error": str(e), "step": step_idx})
              print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
          except Exception as e:
            write_event(run_dir, {"ts": _now_iso(), "type": "post_action_extract_error", "error": str(e), "step": step_idx})
            print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")

        except Exception as e:
          write_event(run_dir, {"ts": _now_iso(), "type": "tool_error", "step": step_idx, "tool": mapped, "args": args, "error": str(e)})
          history.append({"progress": progress, "tool": logical_name, "error": str(e)})

        # Simple pause between steps
        time.sleep(2.0)


def main() -> None:
  parser = argparse.ArgumentParser()
  parser.add_argument("--goal", required=False, default="", help="–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ü–µ–ª—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: 'YouTube: –Ω–∞–π–¥–∏ –∏ –∑–∞–ø—É—Å—Ç–∏ —Ö–∏–ø-—Ö–æ–ø'")
  parser.add_argument("--max-steps", type=int, default=20)
  parser.add_argument("--model", default="gemini-2.5-flash")
  args = parser.parse_args()

  # Interactive goal input if not provided via flag
  goal = args.goal.strip()
  if not goal:
    print("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter:", flush=True)
    goal = sys.stdin.readline().strip()
    if not goal:
      print("–ü—É—Å—Ç–∞—è —Ü–µ–ª—å. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
      return

  run_id = str(uuid.uuid4())
  run_dir = os.path.join(RUNS_DIR, run_id)
  _ensure_dir(run_dir)

  write_meta(run_dir, {"run_id": run_id, "started_at": _now_iso(), "goal": goal, "model": args.model, "c6": True})

  try:
    asyncio.run(run_c6_loop(goal=goal, max_steps=args.max_steps, model_name=args.model, run_dir=run_dir))
  except KeyboardInterrupt:
    print("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")

  print("–ì–æ—Ç–æ–≤–æ. –õ–æ–≥–∏ —à–∞–≥–∞: ", run_dir)


if __name__ == "__main__":
  main()


